# Docs: https://github.com/Azure/webapps-deploy
name: Build and deploy Python app to Azure Web App - vehicle-dismantling-api

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: vehicle-dismantling-api

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      # Upload ONLY the backend folder as the artifact
      - name: Upload backend as artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-python
          path: backend-python

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-python
          path: backend-python

      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_7663DF00EABC4498862FC7085FB509BF }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_A8E88DB4193742E0B1AD9D23B117B0A4 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_EA5334BB99E541E2A069978BFEB031B2 }}

      # Configure web app (startup command + app settings) using AZ CLI inside the container,
      # and explicitly pass the env vars from the login step.
      - name: Configure web app (startup + app settings)
        uses: azure/CLI@v2
        env:
          AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          AZURE_FEDERATED_TOKEN_FILE: ${{ env.AZURE_FEDERATED_TOKEN_FILE }}
          AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
          AZURE_WEBAPP_NAME: ${{ env.AZURE_WEBAPP_NAME }}
        with:
          azcliversion: 2.61.0
          inlineScript: |
            set -euo pipefail

            # Fresh CLI config to avoid MSAL pickle/cache issues
            export AZURE_CONFIG_DIR="$(mktemp -d)"

            # OIDC login inside the container using the federated token file
            az login --service-principal \
              --username "$AZURE_CLIENT_ID" \
              --tenant "$AZURE_TENANT_ID" \
              --federated-token "$(cat "$AZURE_FEDERATED_TOKEN_FILE")" \
              --only-show-errors --output none

            az account set -s "$AZURE_SUBSCRIPTION_ID"

            # Set startup command: app is deployed to /home/site/wwwroot, module is main:app
            az webapp config set \
              -g "$AZURE_RESOURCE_GROUP" \
              -n "$AZURE_WEBAPP_NAME" \
              --startup-file "gunicorn --chdir /home/site/wwwroot -w 2 -k gthread --threads 4 --timeout 180 -b 0.0.0.0:\$PORT main:app" \
              --only-show-errors

            # Make Kudu/Oryx build dependencies during deployment
            az webapp config appsettings set \
              -g "$AZURE_RESOURCE_GROUP" \
              -n "$AZURE_WEBAPP_NAME" \
              --settings SCM_DO_BUILD_DURING_DEPLOYMENT=1 ENABLE_ORYX_BUILD=1 \
              --only-show-errors

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: Production
          package: backend-python # deploy the folder you downloaded
          clean: true # wipe wwwroot before deploying
